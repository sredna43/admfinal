folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
print(head(preds))
test.df <- test.df %>%
mutate(preds = ifelse(preds > 0.5, 1, 0))
errs[fold] <- with(test.df,mean(class != preds))
}
print(mod.rpart)
(mean(errs))
}
calcErrorRpartClass("class ~ cap.shape")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
print(head(test.df$preds))
test.df <- test.df %>%
mutate(preds = ifelse(preds > 0.5, 1, 0))
errs[fold] <- with(test.df,mean(class != preds))
}
print(mod.rpart)
(mean(errs))
}
calcErrorRpartClass("class ~ cap.shape")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
print(mod.rpart)
(mean(errs))
}
calcErrorRpartClass("class ~ cap.shape")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ cap.shape")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ .")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ odor")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ cap.color + cap.surface")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ " + colnames(mush.df)[2:8])
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ " + colnames(mush.df)[2])
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ " + colnames(mush.df[c(2:10),])
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ " + colnames(mush.df[c(2:10),]))
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ " + colnames(mush.df[c(2:10)]))
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
## Get rid of odor for now
data.df$odor <- NULL
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ " + "cap.shape")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ . - odor")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ -odor")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ -odor + .")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ . - odor")
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ .")
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
train.df <- data.df[folds != 4,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = 0.00001)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
train.df <- data.df[folds != 4,]
mod.rpart <- rpart(class ~ .,
data=train.df,
method = "class",
cp = 0.00001)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
train.df <- data.df[folds != 4,]
mod.rpart <- rpart(class ~ .,
data=train.df,
method = "class",
cp = 0.00001)
printcp(mod.rpart)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
train.df <- data.df[folds != 4,]
mod.rpart <- rpart(class ~ .,
data=train.df,
method = "class",
cp = 0.000001)
plotcp(mod.rpart)
bestCP <- model_tree$cptable[which.min(model_tree$cptable[, "xerror"]), "CP"]
bestCP <- mod.rpart$cptable[which.min(model_tree$cptable[, "xerror"]), "CP"]
bestCP <- mod.rpart$cptable[which.min(mod.rpart$cptable[, "xerror"]), "CP"]
calcErrorRpartClass <- function(test_formula){
frm <- as.formula(test_formula)
data.df <- mush.df
numFolds <- 10
n <- nrow(data.df)
folds <- sample(1:numFolds,n,rep=T)
errs <- numeric(numFolds)
for(fold in 1:numFolds){
train.df <- data.df[folds != fold,]
test.df <- data.df[folds == fold,]
mod.rpart <- rpart(frm,
data=train.df,
method = "class",
cp = bestCP)
test.df$preds <- predict(mod.rpart,
newdata = test.df,
type = "class")
errs[fold] <- with(test.df,mean(class != preds))
}
(mean(errs))
}
calcErrorRpartClass("class ~ .")
library(rpart.plot)
install.packages(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
## Make a new model using best cp
mod.rpart.pruned <- prune(mod.rpart, cp = bestCP)
rpart.plot(mod.rpart.pruned)
library(rpart.plot)
## Make a new model using best cp
mod.rpart.pruned <- prune(mod.rpart, cp = bestCP)
rpart.plot(mod.rpart.pruned, extra = 100)
library(rpart.plot)
## Make a new model using best cp
mod.rpart.pruned <- prune(mod.rpart, cp = bestCP)
rpart.plot(mod.rpart.pruned, extra = 100, box.palette = "GnBu")
library(rpart.plot)
## Make a new model using best cp
mod.rpart.pruned <- prune(mod.rpart, cp = bestCP)
rpart.plot(mod.rpart.pruned, extra = 100, box.palette = "GnBu", nn = T)
library(rnadomForest)
library(randomForest)
plot(mod.rf)
library(randomForest)
mod.rf <- randomForest(class ~ ., ntree = 50, data = train.df)
plot(mod.rf)
